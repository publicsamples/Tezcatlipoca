/** Autogenerated Main.cpp. */

// ===============================| Include only the DSP files  |===============================

#include <hi_dsp_library/hi_dsp_library.h>
#include <hi_faust/hi_faust.h>
#include "includes.h"
// =========================| Now we can add the rest of the codebase |=========================

#include <JuceHeader.h>

// =====================================| Project Factory |=====================================

namespace project
{

struct Factory: public scriptnode::dll::StaticLibraryHostFactory
{
	Factory()
	{
		TempoSyncer::initTempoData();
		// Node registrations -----------------------------------------------------------------
		
		registerPolyNode<project::filterBank<1>, project::filterBank<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::geq<1>, wrap::illegal_poly<project::geq<1>>>();
		registerDataNode<project::ain2_networkdata>();
		registerDataNode<project::ain3_networkdata>();
		registerDataNode<project::ain4_networkdata>();
		registerDataNode<project::analyize_in_networkdata>();
		registerDataNode<project::clear_networkdata>();
		registerDataNode<project::cloneEQ_networkdata>();
		registerDataNode<project::dd_networkdata>();
		registerDataNode<project::delay_networkdata>();
		registerDataNode<project::delverb_networkdata>();
		registerDataNode<project::DspNetwork_networkdata>();
		registerDataNode<project::eeeqqq_networkdata>();
		registerDataNode<project::end1_networkdata>();
		registerDataNode<project::envin_networkdata>();
		registerDataNode<project::eqtest_networkdata>();
		registerDataNode<project::follow_networkdata>();
		registerDataNode<project::follow2_networkdata>();
		registerDataNode<project::follow3_networkdata>();
		registerDataNode<project::follow4_networkdata>();
		registerDataNode<project::mod_networkdata>();
		registerDataNode<project::osc1_networkdata>();
		registerDataNode<project::osc2_networkdata>();
		registerDataNode<project::pin_networkdata>();
		registerDataNode<project::postfollow_networkdata>();
		registerDataNode<project::replace_networkdata>();
		registerDataNode<project::replace1_networkdata>();
		registerDataNode<project::replace2_networkdata>();
		registerDataNode<project::replace3_networkdata>();
		registerDataNode<project::replace4_networkdata>();
		registerDataNode<project::tes2_networkdata>();
		registerDataNode<project::verbsend_networkdata>();
		registerDataNode<project::WeirdDelay_networkdata>();
		registerDataNode<project::wg_networkdata>();
	}
};
}

scriptnode::dll::FactoryBase* hise::FrontendHostFactory::createStaticFactory()
{
	return new project::Factory();
}

